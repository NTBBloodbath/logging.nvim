==============================================================================
logging.nvim                                                           *logging*


Logging library for Neovim plugins, slightly inspired by rmagatti/logger.nvim
and extracted from `rest.nvim`.

------------------------------------------------------------------------------

Usage:

```lua
local logger = require("logging"):new({
  level = "debug",
  plugin = "rest.nvim",
})

logger:set_log_level("info")

logger:info("This is an info log")
 -- [rest.nvim] INFO: This is an info log
```


Logging                                                                *Logging*

    Fields: ~
        {_VERSION}  (string)  logging.nvim version constant


LoggingLevels                                                    *LoggingLevels*

    Fields: ~
        {trace}  (number)  Equivalent of `vim.log.levels.TRACE`
        {debug}  (number)  Equivalent of `vim.log.levels.DEBUG`
        {info}   (number)  Equivalent of `vim.log.levels.INFO`
        {warn}   (number)  Equivalent of `vim.log.levels.WARN`
        {error}  (number)  Equivalent of `vim.log.levels.ERROR`

    See: ~
        |vim.log.levels|


LoggingConfig                                                    *LoggingConfig*

    Fields: ~
        {level_name?}  (string)   Logging level name. Default is `"info"`
        {plugin_name}  (string)   Plugin name. Default is `""`
        {save_logs?}   (boolean)  Whether to save log messages into a `.log` file. Default is `true`


logging:new({opts})                                                *logging:new*
    Create a new logger instance

    Parameters: ~
        {opts}  (LoggingConfig)  Logger configuration

    Returns: ~
        (Logging)


logging:set_log_level({level})                           *logging:set_log_level*
    Set the log level for the logger

    Parameters: ~
        {level}  (string)  New logging level

    See: ~
        |vim.log.levels|


logging:trace({msg})                                             *logging:trace*
    Log a trace message

    Parameters: ~
        {msg}  (string)  Log message


logging:debug({data})                                            *logging:debug*
    Log a debug message

    Parameters: ~
        {data}  (any)  Log message data. If it is a table, it will be converted into a readable representation


logging:info({msg})                                               *logging:info*
    Log an info message

    Parameters: ~
        {msg}  (string)  Log message


logging:warn({msg})                                               *logging:warn*
    Log a warning message

    Parameters: ~
        {msg}  (string)  Log message


logging:error({msg})                                             *logging:error*
    Log an error message

    Parameters: ~
        {msg}  (string)  Log message


vim:tw=78:ts=8:noet:ft=help:norl:
